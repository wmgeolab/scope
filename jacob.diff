diff --git a/backend/scopeBackend/models.py b/backend/scopeBackend/models.py
index 7324b3b..8381ead 100644
--- a/backend/scopeBackend/models.py
+++ b/backend/scopeBackend/models.py
@@ -69,7 +69,6 @@ class Result(models.Model):
 class Workspace(models.Model):
     id = models.AutoField(primary_key=True)
     name = models.CharField(max_length=120)
-    owner = models.CharField(max_length=120)
     tags = models.CharField(max_length=300)
     password = models.CharField(max_length=120)
     status = models.BooleanField(default=True)
@@ -77,7 +76,6 @@ class Workspace(models.Model):
     def __str__(self):
         return self.name
 
-
 class WorkspaceMembers(models.Model):
     user = models.ForeignKey(User, on_delete=models.PROTECT)
     workspace = models.ForeignKey(Workspace, on_delete=models.CASCADE)
@@ -91,3 +89,4 @@ class WorkspaceEntries(models.Model):
 
     def __str__(self):
         return self.id
+
diff --git a/backend/scopeBackend/serializers.py b/backend/scopeBackend/serializers.py
index 500a93a..ea286b1 100644
--- a/backend/scopeBackend/serializers.py
+++ b/backend/scopeBackend/serializers.py
@@ -80,25 +80,7 @@ class ResultSerializer(serializers.ModelSerializer):
     class Meta:
         model = Result
         fields = ('id', 'run', 'source')
-
 class WorkspaceSerializer(serializers.ModelSerializer):
-    user = serializers.SlugRelatedField(read_only=True, slug_field='username')
     class Meta:
         model = Workspace
-        fields = ('id', 'name', 'owner', 'user', 'tags', 'sources', 'password', 'status')
-
-class WorkspaceMembersSerializer(serializers.ModelSerializer):
-    user = UserSerializer()
-    workspace = WorkspaceSerializer()
-
-    class Meta:
-        model = Result
-        fields = ('id', 'user', 'workspace')
-
-class WorkspaceEntriesSerializer(serializers.ModelSerializer):
-    workspace = WorkspaceSerializer()
-    source = SourceSerializer()
-
-    class Meta:
-        model = Result
-        fields = ('id', 'workspace', 'source')
\ No newline at end of file
+        fields = ('id', 'name', 'tags', 'password', 'status')
diff --git a/backend/scopeBackend/views.py b/backend/scopeBackend/views.py
index 305415d..766ac6c 100644
--- a/backend/scopeBackend/views.py
+++ b/backend/scopeBackend/views.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from __future__ import unicode_literals
 
-from django.shortcuts import render
+from django.shortcuts import get_object_or_404, render
 from rest_framework import viewsets
 from .serializers import UserSerializer, QuerySerializer, ResultSerializer, RunSerializer, SourceSerializer, WorkspaceSerializer
-from .models import User, Query, Result, Source, Run, Workspace
+from .models import User, Query, Result, Source, Run, Workspace, WorkspaceMembers
 from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
 from rest_framework.decorators import action
@@ -81,7 +81,7 @@ class ResultView(viewsets.ModelViewSet):
 class RunView(viewsets.ModelViewSet):
     permission_classes = [IsAuthenticated]
     serializer_class = RunSerializer
-    queryset = Run.objects.all()
+    queryset = Workspace.objects.all()
 
 
 class SourceView(viewsets.ModelViewSet):
@@ -90,7 +90,70 @@ class SourceView(viewsets.ModelViewSet):
     serializer_class = SourceSerializer
     queryset = Source.objects.all()
 
-
 class WorkspaceView(viewsets.ModelViewSet):
     permission_classes = [IsAuthenticated]
-    serializer_class = WorkspaceSerializer
\ No newline at end of file
+    serializer_class = WorkspaceSerializer
+
+    def get_queryset(self):
+        return Workspace.objects.filter(user=self.request.user)
+
+    def list(self, request):
+        queryset = self.get_queryset()
+        serializer = self.get_serializer(queryset, many=True)
+        return Response(serializer.data)
+
+    def retrieve(self, request, pk=None):
+        workspace = get_object_or_404(self.get_queryset(), pk=pk)
+        serializer = self.get_serializer(workspace)
+        return Response(serializer.data)
+
+    @action(detail=True, methods=['post'])
+    def add(self, request, pk=None):
+        workspace = get_object_or_404(self.get_queryset(), pk=pk)
+        result_ids = request.data.get('result_ids')
+        if not result_ids:
+            return Response({'error': 'result_ids field is required'}, status=status.HTTP_400_BAD_REQUEST)
+        results = Result.objects.filter(pk__in=result_ids)
+        workspace.results.add(*results)
+        serializer = self.get_serializer(workspace)
+        return Response(serializer.data)
+
+    @action(detail=True, methods=['post'])
+    def remove(self, request, pk=None):
+        workspace = get_object_or_404(self.get_queryset(), pk=pk)
+        result_ids = request.data.get('result_ids')
+        if not result_ids:
+            return Response({'error': 'result_ids field is required'}, status=status.HTTP_400_BAD_REQUEST)
+        results = Result.objects.filter(pk__in=result_ids)
+        workspace.results.remove(*results)
+        serializer = self.get_serializer(workspace)
+        return Response(serializer.data)
+
+    @action(detail=False, methods=['post'], url_path='create', url_name='create_workspace')
+    def create_workspace(self, request):
+        name = request.data.get('name')
+        password = request.data.get('password')
+
+        # Check if name and password are not empty
+        if not name or not password:
+            return Response({'error': 'Name and password are required'}, status=status.HTTP_400_BAD_REQUEST)
+
+        # Create workspace
+        workspace = Workspace.objects.create(name=name, password=password)
+
+        # Add current user to the workspace as a member
+        WorkspaceMembers.objects.create(user=request.user, workspace=workspace)
+
+        serializer = WorkspaceSerializer(workspace)
+        return Response(serializer.data, status=status.HTTP_201_CREATED)
+
+    @action(detail=True, methods=['post'])
+    def join(self, request, pk=None):
+        workspace = get_object_or_404(self.get_queryset(), pk=pk)
+        password = request.data.get('password')
+        if not password:
+            return Response({'error': 'password field is required'}, status=status.HTTP_400_BAD_REQUEST)
+        if not workspace.check_password(password):
+            return Response({'error': 'incorrect password'}, status=status.HTTP_401_UNAUTHORIZED)
+        WorkspaceMembers.objects.create(user=request.user, workspace=workspace)
+       
\ No newline at end of file
